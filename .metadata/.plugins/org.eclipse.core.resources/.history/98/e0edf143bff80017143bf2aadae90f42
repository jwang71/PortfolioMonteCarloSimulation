import java.util.Collections;
import java.util.PriorityQueue;

public class RunSimulation {

	public static void main(String[] args) {
		double medianA = 0.0;
		double medianB = 0.0;
		double meanA = 0.0;
		double meanB = 0.0;
		
		PriorityQueue<Double> topTenPercentA = new PriorityQueue<Double>();
		PriorityQueue<Double> topTenPercentB = new PriorityQueue<Double>();

		PriorityQueue<Double> lastTenPercentA = new PriorityQueue<Double>(11, Collections.reverseOrder());
		PriorityQueue<Double> lastTenPercentB = new PriorityQueue<Double>(11, Collections.reverseOrder());

		MedianTracker mtA = new MedianTracker();
		MedianTracker mtB = new MedianTracker();
	
		Simulation sA = new Simulation();
		Simulation sB = new Simulation();
		double totalA = 0.0;
		double totalB = 0.0;
		
		for (int i = 0; i < 10000; i++) {
			totalA = sA.runMultiYears(20, 100000.0, 9.4324, 15.675);
			mtA.read(totalA);
			medianA = mtA.median();
		//	meanA = (meanA*i + totalA) / (i+1);
			
			if (topTenPercentA.size() < 1000 || totalA > (Double)topTenPercentA.peek()) {
				topTenPercentA.poll();
				topTenPercentA.offer((Double)totalA);
			}
			if (lastTenPercentA.size() < 1000 || totalA < (Double)lastTenPercentA.peek()) {
				lastTenPercentA.poll();
				lastTenPercentA.offer((Double)totalA);
			}
			totalB = sB.runMultiYears(20, 100000.0, 6.189, 6.3438);
			mtB.read(totalB);
			medianB = mtB.median();
		//	meanB = (meanB*i + totalB) / (i+1);

			if (topTenPercentB.size() < 1000 || totalB > (Double)topTenPercentB.peek()) {
				topTenPercentB.poll();
				topTenPercentB.offer((Double)totalB);
			}
			if (lastTenPercentB.size() < 1000 || totalB < (Double)lastTenPercentB.peek()) {
				lastTenPercentB.poll();
				lastTenPercentB.offer((Double)totalB);
			}
		}
	
		System.out.println("Median A : " + medianA);
		System.out.println("Median B : " + medianB);
		
		System.out.println("Top 10% A : " + topTenPercentA.poll());
		System.out.println("Last 10% A : " + lastTenPercentA.poll());
		System.out.println("Top 10% B : " + topTenPercentB.poll());
		System.out.println("Last 10% B : " + lastTenPercentB.poll());
	}

}
